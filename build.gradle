plugins {
    id 'java'
    id 'war'
}

group 'com.halggeol'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

// 빌드 성능 최적화
configurations.configureEach {
    exclude group: 'commons-logging', module: 'commons-logging'
    resolutionStrategy {
        failOnVersionConflict()
        preferProjectModules()
    }
}

// 개발 시 테스트 스킵하는 태스크 추가
task buildFast {
    dependsOn 'compileJava', 'processResources', 'classes', 'war'
    group = 'build'
    description = 'Fast build without tests'
}

ext {
    junitVersion = '5.9.2'
    springVersion = '5.3.37'
    lombokVersion = '1.18.30'
    springSecurityVersion = '5.7.3'
    jjwtVersion = '0.11.5'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
    options.fork = true
    options.forkOptions.jvmArgs += ['-Xmx3g', '-XX:+UseG1GC']
    options.compilerArgs += ['-Xlint:none', '-nowarn']
}

dependencies {
    // 스프링
    implementation ("org.springframework:spring-context:${springVersion}")
            { exclude group: 'commons-logging', module: 'commons-logging' }
    implementation "org.springframework:spring-webmvc:${springVersion}"
    implementation 'javax.inject:javax.inject:1'

    // AOP
    runtimeOnly 'org.aspectj:aspectjrt:1.9.20'
    runtimeOnly 'org.aspectj:aspectjweaver:1.9.20'

    // Caching
    implementation 'org.springframework:spring-context-support:5.3.37'
    implementation 'net.sf.ehcache:ehcache:2.10.9.2'

    // JSP, SERVLET, JSTL
    implementation('javax.servlet:javax.servlet-api:4.0.1')
    compileOnly 'javax.servlet.jsp:jsp-api:2.1'
    implementation 'javax.servlet:jstl:1.2'

    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.9'
    runtimeOnly 'org.slf4j:jcl-over-slf4j:2.0.9'
    runtimeOnly 'org.slf4j:slf4j-log4j12:2.0.9'
    implementation 'log4j:log4j:1.2.17'

    // xml내 한글 처리
    implementation 'xerces:xercesImpl:2.12.2'

    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // Jackson - Json 처리
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.4'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.10'

    // 데이터베이스
    implementation 'com.mysql:mysql-connector-j:8.1.0'
    implementation 'com.zaxxer:HikariCP:2.7.4'

    implementation "org.springframework:spring-tx:${springVersion}"
    implementation "org.springframework:spring-jdbc:${springVersion}"

    implementation 'org.mybatis:mybatis:3.4.6'
    implementation 'org.mybatis:mybatis-spring:1.3.2'


    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4:1.16'
    implementation 'org.apache.logging.log4j:log4j-api:2.0.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.0.1'

    // redis
    implementation 'org.springframework.data:spring-data-redis:2.7.6'

//    implementation 'io.lettuce.core:lettuce-core:6.1.5'


    // 테스트
    testImplementation "org.springframework:spring-test:${springVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testImplementation 'org.mockito:mockito-junit-jupiter:5.12.0'
    testImplementation 'org.assertj:assertj-core:3.25.3'

    // Spring Security
    implementation("org.springframework.security:spring-security-core:${springSecurityVersion}")
    implementation("org.springframework.security:spring-security-web:${springSecurityVersion}")
    implementation("org.springframework.security:spring-security-config:${springSecurityVersion}")
    implementation("org.springframework.security:spring-security-crypto:${springSecurityVersion}")

    // validation
    implementation 'org.hibernate.validator:hibernate-validator:6.2.0.Final'
    implementation 'javax.validation:validation-api:2.0.1.Final'

    // jwt 토큰 기반 인증용
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"

    // 이메일 전송
//    implementation 'org.springframework:spring-context-support:5.3.37'
//    implementation 'com.sun.mail:javax.mail:1.6.2'
    implementation 'com.mashape.unirest:unirest-java:1.4.9'
    implementation 'org.springframework:spring-context-support:5.3.37'
    implementation 'com.sun.mail:javax.mail:1.6.2'

    // https://mvnrepository.com/artifact/org.springframework.batch/spring-batch-core
    implementation("org.springframework.batch:spring-batch-core:4.3.10")
    implementation("org.springframework.batch:spring-batch-infrastructure:4.3.10")

    //mongoDB
    implementation 'org.mongodb:mongodb-driver-sync:4.11.0'
    implementation 'org.springframework.data:spring-data-mongodb:3.4.9'

    // http
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'

    implementation 'org.bouncycastle:bcprov-jdk15to18:1.70'

    // Elasticsearch
    implementation "org.elasticsearch.client:elasticsearch-rest-high-level-client:7.17.13"
    implementation "org.elasticsearch:elasticsearch:7.17.13"
    implementation "org.elasticsearch.client:elasticsearch-rest-client:7.17.13"
    implementation "org.springframework.data:spring-data-elasticsearch:4.4.15"
    implementation "co.elastic.clients:elasticsearch-java:8.12.2" // 선택사항
}


test {
    useJUnitPlatform()
    
    // 빌드 성능 최적화
    maxParallelForks = Runtime.runtime.availableProcessors()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = false
    }
    jvmArgs '-Xmx2g', '-XX:+UseG1GC'
}

// WAR 태스크 최적화
war {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    // 불필요한 파일 제외
    exclude '**/Thumbs.db'
    exclude '**/.DS_Store'
    exclude '**/application.yml'
    
    // 압축 최적화
    entryCompression = ZipEntryCompression.DEFLATED
}

